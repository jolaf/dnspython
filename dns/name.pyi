# Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license

from typing import Any, Iterable, List, Optional, Tuple, Union

have_idna_2008: bool

class Name:
    def is_subdomain(self, o : Name) -> bool: ...
    def is_superdomain(self, o : Name) -> bool: ...
    def __init__(self, labels : Iterable[Union[bytes,str]]) -> None:
        self.labels : List[bytes]
    def is_absolute(self) -> bool: ...
    def is_wild(self) -> bool: ...
    def fullcompare(self, other: object) -> Tuple[int,int,int]: ...
    def canonicalize(self) -> Name: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other : object) -> bool: ...
    def __ne__(self, other : object) -> bool: ...
    def __lt__(self, other : object) -> bool: ...
    def __le__(self, other : object) -> bool: ...
    def __ge__(self, other : object) -> bool: ...
    def __gt__(self, other : object) -> bool: ...
    def to_text(self, omit_final_dot: bool = False) -> str: ...
    def to_unicode(self, omit_final_dot: bool = False, idna_codec: Optional[IDNACodec]=None) -> str: ...
    def to_digestable(self, origin: Optional[Name] = None) -> bytes: ...
    def to_wire(self, file: Any=None, compress: Any=None, origin: Optional[Name]=None, canonicalize: bool=False) -> Optional[bytes]: ...
    def __add__(self, other : Name) -> Name: ...
    def __sub__(self, other : Name) -> Name: ...
    def split(self, depth: int) -> List[Tuple[str,str]]: ...
    def concatenate(self, other : Name) -> Name: ...
    def relativize(self, origin: Name) -> Name: ...
    def derelativize(self, origin: Name) -> Name: ...
    def choose_relativity(self, origin : Optional[Name] = None, relativize: bool=True) -> Name: ...
    def parent(self) -> Name: ...

class IDNACodec:
    pass

def from_text(text: str, origin : Optional[Name] = ..., idna_codec : Optional[IDNACodec] = None) -> Name:
    ...

empty : Name
