# Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license

from typing import Any, BinaryIO, Dict, Optional

from dns.name import Name
from dns.rdata import Rdata

class DSBase(Rdata):
    key_tag: Any = ...
    algorithm: Any = ...
    digest_type: Any = ...
    digest: Any = ...
    def __init__(self, rdclass: Any, rdtype: Any, key_tag: Any, algorithm: Any, digest_type: Any, digest: Any) -> None: ...
    def to_text(self, origin: Optional[Any] = ..., relativize: bool = ..., **kw: Any) -> str: ...
    @classmethod
    def from_text(cls, rdclass : int, rdtype : int, tok: Any, origin: Optional[Name] = None, relativize: bool = True, relativize_to: Optional[Name] = None) -> 'DSBase': ...
    def _to_wire(self, file : Optional[BinaryIO], compress : Optional[Dict[Name,int]], origin : Optional[Name], canonicalize : bool) -> bytes: ... # pylint: disable=signature-differs
    def to_wire(self, file : Optional[BinaryIO], compress : Optional[Dict[Name,int]], origin : Optional[Name], canonicalize : bool) -> bytes: ... # pylint: disable=signature-differs
    @classmethod
    def from_wire(cls, rdclass: Any, rdtype: Any, wire: Any, current: Any, rdlen: Any, origin: Optional[Name] = ...) -> 'DSBase': ... # type: ignore[override]
