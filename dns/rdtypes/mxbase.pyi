# Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license

from typing import Any, BinaryIO, Dict, Optional

from dns.name import Name
from dns.rdata import Rdata

class MXBase(Rdata):
    preference: Any = ...
    exchange: Any = ...
    def __init__(self, rdclass: Any, rdtype: Any, preference: Any, exchange: Any) -> None: ...
    def to_text(self, origin: Optional[Any] = ..., relativize: bool = ..., **kw: Any) -> str: ...
    @classmethod
    def from_text(cls, rdclass: Any, rdtype: Any, tok: Any, origin: Optional[Any] = ..., relativize: bool = ...) -> MXBase: ...
    def to_wire(self, file : Optional[BinaryIO], compress : Optional[Dict[Name,int]], origin : Optional[Name], canonicalize : Optional[bool]) -> Optional[bytes]: ...
    def to_digestable(self, origin: Optional[Any] = ...) -> bytes: ...
    @classmethod
    def from_wire(cls, rdclass: Any, rdtype: Any, wire: Any, current: Any, rdlen: Any, origin: Optional[Any] = ...) -> MXBase: ...
    def choose_relativity(self, origin: Optional[Any] = ..., relativize: bool = ...) -> None: ...

class UncompressedMX(MXBase):
    def to_wire(self, file : Optional[BinaryIO], compress : Optional[Dict[Name,int]], origin : Optional[Name], canonicalize : Optional[bool]) -> Optional[bytes]: ...
    def to_digestable(self, origin: Optional[Any] = ...) -> bytes: ...

class UncompressedDowncasingMX(MXBase):
    def to_wire(self, file : Optional[BinaryIO], compress : Optional[Dict[Name,int]], origin : Optional[Name], canonicalize : Optional[bool]) -> Optional[bytes]: ...
